directive @enum(subgraph: String, value: String) on ENUM_VALUE

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: ObjMap, httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean) on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: ObjMap, queryStringOptions: ObjMap, queryParams: ObjMap) on OBJECT

type Query {
  """Multiple status values can be provided with comma separated strings"""
  findPetsByStatus(status: queryInput_findPetsByStatus_status = available): [Pet]

  """
  Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  """
  findPetsByTags(
    """Tags to filter by"""
    tags: [String]
  ): [Pet]

  """Returns a single pet"""
  getPetById(
    """ID of pet to return"""
    petId: BigInt!
  ): Pet

  """Returns a map of status codes to quantities"""
  getInventory: JSON

  """
  For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
  """
  getOrderById(
    """ID of order that needs to be fetched"""
    orderId: BigInt!
  ): Order

  """Logs user into the system"""
  loginUser(
    """The user name for login"""
    username: String

    """The password for login in clear text"""
    password: String
  ): String

  """Logs out current logged in user session"""
  logoutUser: JSON

  """Get user by user name"""
  getUserByName(
    """The name that needs to be fetched. Use user1 for testing."""
    username: String!
  ): User
}

"""Pet object that needs to be added to the store"""
type Pet {
  id: BigInt
  name: String!
  category: Category
  photoUrls: [String]!
  tags: [Tag]
  status: mutation_updatePet_status
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Category {
  id: BigInt
  name: String
}

type Tag {
  id: BigInt
  name: String
}

"""pet status in the store"""
enum mutation_updatePet_status {
  available
  pending
  sold
}

"""Status values that need to be considered for filter"""
enum queryInput_findPetsByStatus_status {
  available
  pending
  sold
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Order {
  id: BigInt
  petId: BigInt
  quantity: Int
  shipDate: DateTime
  status: mutation_placeOrder_status
  complete: Boolean
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Order Status"""
enum mutation_placeOrder_status {
  placed
  approved
  delivered
}

type User {
  id: BigInt
  username: String
  firstName: String
  lastName: String
  email: EmailAddress
  password: String
  phone: String

  """User Status"""
  userStatus: Int
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

type Mutation {
  """Update an existing pet by Id"""
  updatePet(input: Pet_Input): Pet

  """Add a new pet to the store"""
  addPet(input: Pet_Input): Pet

  """Updates a pet in the store with form data"""
  updatePetWithForm(
    """ID of pet that needs to be updated"""
    petId: BigInt!

    """Name of pet that needs to be updated"""
    name: String

    """Status of pet that needs to be updated"""
    status: String
  ): JSON

  """delete a pet"""
  deletePet(
    api_key: String

    """Pet id to delete"""
    petId: BigInt!
  ): JSON

  """uploads an image"""
  uploadFile(
    """ID of pet to update"""
    petId: BigInt!

    """Additional Metadata"""
    additionalMetadata: String
    input: File
  ): ApiResponse

  """Place a new order in the store"""
  placeOrder(input: Order_Input): Order

  """
  For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
  """
  deleteOrder(
    """ID of the order that needs to be deleted"""
    orderId: BigInt!
  ): JSON

  """This can only be done by the logged in user."""
  createUser(input: User_Input): User

  """Creates list of users with given input array"""
  createUsersWithListInput(input: [User_Input]): User

  """This can only be done by the logged in user."""
  updateUser(
    """name that need to be deleted"""
    username: String!
    input: User_Input
  ): JSON

  """This can only be done by the logged in user."""
  deleteUser(
    """The name that needs to be deleted"""
    username: String!
  ): JSON
}

"""Pet object that needs to be added to the store"""
input Pet_Input {
  id: BigInt
  name: String!
  category: Category_Input
  photoUrls: [String]!
  tags: [Tag_Input]
  status: mutation_updatePet_status
}

input Category_Input {
  id: BigInt
  name: String
}

input Tag_Input {
  id: BigInt
  name: String
}

type ApiResponse {
  code: Int
  type: String
  message: String
}

"""The `File` scalar type represents a file upload."""
scalar File

input Order_Input {
  id: BigInt
  petId: BigInt
  quantity: Int
  shipDate: DateTime
  status: mutation_placeOrder_status
  complete: Boolean
}

input User_Input {
  id: BigInt
  username: String
  firstName: String
  lastName: String
  email: EmailAddress
  password: String
  phone: String

  """User Status"""
  userStatus: Int
}

scalar ObjMap

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}